<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>jsTree test</title>
  <!-- 2 load the theme CSS file
  <link rel="stylesheet" href="dist/themes/default/style.min.css" />
  -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css" />
</head>
<body>
  <!-- 3 setup a container element -->
  <div id="jstree">
    </ul>
  </div>
  <button>demo button</button>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"></script>
  <script>
      function parentGetAllChildData (tree) {
        maxSlashCnt = 0;   
        for (var i = 0; i < tree.core.data.length; i++) {
          var slashCnt = (tree.core.data[i].id.match (/\//g)|| []).length;
          if (slashCnt > maxSlashCnt) 
            maxSlashCnt = slashCnt;
        }
    
        pNode = []
        for (var i = 0; i < tree.core.data.length; i++) {
          if (tree.core.data[i].id[tree.core.data[i].id.length-1] === '/') {
            node = {};
            node.id = tree.core.data[i].id;
            node.value = tree.core.data[i].value;
            pNode.push (node);
          }
        }
        
        maxSlashCnt = 0;   
        for (var i = 0; i < pNode.length; i++) {
          var slashCnt = (pNode[i].id.match (/\//g)|| []).length;
          if (slashCnt > maxSlashCnt) {
              maxSlashCnt = slashCnt;
          }
        }
    
        // sort from longest slash.
        for (var i = 0; i < pNode.length; i++) {
          var iSlashCnt = (pNode[i].id.match (/\//g)|| []).length;
          for (var j = 1; j < pNode.length; j++) {
            var jSlashCnt = (pNode[j].id.match (/\//g)|| []).length;
            if (iSlashCnt > jSlashCnt) {
              tmpNode = {};
              tmpNode = pNode[i];
              pNode[i] = pNode[j];
              pNode[j] = tmpNode;
            }
          }
        }
        for (var i = 0; i < pNode.length; i++) {
          // find children. Match from the deepest hierachy, i.e., biggest slash count ('/')
          var childSumValue = 0;
          var unit = '';
          for (var j = 0; j < tree.core.data.length; j++) {
            if (tree.core.data[j].id.substring (0, pNode[i].id.length) === pNode[i].id) {
              if (tree.core.data[j].hasValue === true) {
                childSumValue = childSumValue + parseInt (tree.core.data[j].value);
                unit = tree.core.data[j].unit;
              }
            }
          }
          // find parent
          for (var j = 0; j < tree.core.data.length; j++) {
            if (tree.core.data[j].id === pNode[i].id) {
              tree.core.data[j].value = childSumValue;
              tree.core.data[j].unit = unit;
            }
          }
        }
    
        for (var i = 0; i < tree.core.data.length; i++) {
          tree.core.data[i].text = tree.core.data[i].text + ': ' + tree.core.data[i].value + ' ' + tree.core.data[i].unit;
        }
        return tree;
      }

  $(function () {
    tree = {
      'core' : {
          'data' : [
          ]
      } 
    }
    // Note: The last digit "/" is very important. With "/", it is a folder. Without "/", it is a leaf node.
    // All the leaf node need the folder to be the parent.
    data = [ 
      "env/child1/env/",
      "env/child1/env/key1",
      "env/child1/key1",
      "env/child1/key2",
      "env/child1/",
      "env/child2/key1",
      "env/child2/key2",
      "env/child2/key3",
      "env/child2/key4/",
      "env/child2/key4/key5",
      "env/child2/",
      "env/",
    ];
    
    minlen = -1;
    picked = "";
    for(i =0; i<data.length; i++) {
        if(data[i].length < minlen || minlen == -1) {
            minlen = data[i].length;
            picked = data[i];
        }
    }
    
    tree.core.data.push({ "id" : picked, "parent" : "#", "text" : picked })
    xdata = data
    xdata.splice(xdata.indexOf(picked), 1)
    
    for(i =0; i < xdata.length; i++) {
        name = xdata[i]
        parent = ""
        if(name.substr(name.length-1,1) == '/') {
            xname = name.substr(0,name.length-1);
            parent = xname.substr(0,xname.lastIndexOf("/")+1)
        } else {
            parent = name.substr(0,name.lastIndexOf("/")+1)
        }
        tree.core.data.push({ "id" : name, "parent" : parent, "text" : name })
    }
    // Set additional data for testing.
    for (var i = 0; i < tree.core.data.length; i++) {
      if (tree.core.data[i].id === "env/child1/env/key1") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 101 ";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child1/key1") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 11";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child1/key2") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 12";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child2/key1") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 21";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child2/key2") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 22";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child2/key3") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 23";
        tree.core.data[i].unit = "MBps";
      }
      if (tree.core.data[i].id === "env/child2/key4/key5") {
        tree.core.data[i].hasValue = true;
        tree.core.data[i].value = " 245";
        tree.core.data[i].unit = "MBps";
      }
    }
    jsTree = parentGetAllChildData (tree);

    $('#jstree').jstree(jsTree);
  });
  
  </script>
</body>
</html>